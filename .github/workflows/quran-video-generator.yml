name: Generate Quran Video

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      output_path:
        description: "Path for the output video file"
        required: true
        default: "output/quran_video.mp4"
      ayah_count:
        description: "Number of ayahs to include (1-5)"
        required: false
        default: "3"
        type: number
      background_color:
        description: "Background color (default: black)"
        required: false
        default: "black"
      text_color:
        description: "Text color for Arabic and translation"
        required: false
        default: "white"
      font_size_arabic:
        description: "Font size for Arabic text"
        required: false
        default: "54"
        type: number

jobs:
  generate-quran-video:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq curl bc
          
          # Install Arabic fonts for Quran text
          sudo apt-get install -y fonts-noto fonts-liberation fonts-dejavu-core
          sudo apt-get install -y fonts-kacst fonts-kacst-one fonts-hosny-amiri || true
          
          # Install additional Arabic fonts if available
          sudo apt-get install -y fonts-amiri fonts-scheherazade-new || true
          
          # List available Arabic fonts
          echo "Available Arabic fonts:"
          fc-list :lang=ar | head -10

      - name: Create output directory
        run: |
          mkdir -p output
          mkdir -p temp

      - name: Generate unique output filename
        id: output
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S_%s)
          OUTPUT_DIR=$(dirname "${{ github.event.inputs.output_path }}")
          OUTPUT_BASENAME=$(basename "${{ github.event.inputs.output_path }}" .mp4)
          UNIQUE_OUTPUT="${OUTPUT_DIR}/${OUTPUT_BASENAME}_${TIMESTAMP}.mp4"
          echo "unique_output=$UNIQUE_OUTPUT" >> $GITHUB_OUTPUT
          echo "Generated unique output filename: $UNIQUE_OUTPUT"

      - name: Fetch random Quran ayahs
        id: quran
        run: |
          echo "Fetching multiple random Quran ayahs..."
          
          # Get parameters
          AYAH_COUNT="${{ github.event.inputs.ayah_count }}"
          if [ "$AYAH_COUNT" -gt 5 ]; then
            AYAH_COUNT=5
            echo "Limited ayah count to maximum of 5"
          fi
          echo "Fetching $AYAH_COUNT ayahs"
          
          # Get random surah (1-114)
          RANDOM_SURAH=$((RANDOM % 114 + 1))
          echo "Selected Surah: $RANDOM_SURAH"
          
          # Fetch surah info to get the number of ayahs
          SURAH_INFO=$(curl -s "https://api.alquran.cloud/v1/surah/$RANDOM_SURAH")
          TOTAL_AYAHS=$(echo "$SURAH_INFO" | jq -r '.data.numberOfAyahs')
          SURAH_NAME=$(echo "$SURAH_INFO" | jq -r '.data.name')
          SURAH_NAME_EN=$(echo "$SURAH_INFO" | jq -r '.data.englishName')
          echo "Total ayahs in this surah: $TOTAL_AYAHS"
          echo "Surah: $SURAH_NAME ($SURAH_NAME_EN)"
          
          # Get random starting ayah, ensuring we don't exceed surah length
          MAX_START_AYAH=$((TOTAL_AYAHS - AYAH_COUNT + 1))
          if [ "$MAX_START_AYAH" -lt 1 ]; then
            MAX_START_AYAH=1
            AYAH_COUNT=$TOTAL_AYAHS
            echo "Adjusted ayah count to $AYAH_COUNT (surah length)"
          fi
          
          RANDOM_START_AYAH=$((RANDOM % MAX_START_AYAH + 1))
          RANDOM_END_AYAH=$((RANDOM_START_AYAH + AYAH_COUNT - 1))
          
          echo "Selected Ayahs: $RANDOM_START_AYAH to $RANDOM_END_AYAH"
          
          # Fetch multiple ayahs with Arabic text and audio
          echo "Fetching ayahs $RANDOM_SURAH:$RANDOM_START_AYAH-$RANDOM_END_AYAH..."
          
          # Get Arabic text (simple Arabic text)
          ARABIC_RESPONSE=$(curl -s "https://api.alquran.cloud/v1/surah/$RANDOM_SURAH/ar.asem")
          
          # Extract the specific ayahs we want
          COMBINED_ARABIC_TEXT=""
          AUDIO_URLS=""
          
          for ((i=RANDOM_START_AYAH; i<=RANDOM_END_AYAH; i++)); do
            # Get Arabic text for this ayah
            AYAH_TEXT=$(echo "$ARABIC_RESPONSE" | jq -r ".data.ayahs[$((i-1))].text")
            echo "Ayah $i: $AYAH_TEXT"
            
            if [ -n "$COMBINED_ARABIC_TEXT" ]; then
              COMBINED_ARABIC_TEXT="$COMBINED_ARABIC_TEXT ۝ $AYAH_TEXT"
            else
              COMBINED_ARABIC_TEXT="$AYAH_TEXT"
            fi
            
            # Try to get audio for each ayah
            echo "Trying to fetch audio for ayah $i..."
            YASSER_RESPONSE=$(curl -s "https://api.alquran.cloud/v1/ayah/$RANDOM_SURAH:$i/ar.yasserdossari")
            AYAH_AUDIO_URL=$(echo "$YASSER_RESPONSE" | jq -r '.data.audio // ""')
            
            if [ -n "$AYAH_AUDIO_URL" ] && [ "$AYAH_AUDIO_URL" != "null" ] && [ "$AYAH_AUDIO_URL" != "" ]; then
              if [ -n "$AUDIO_URLS" ]; then
                AUDIO_URLS="$AUDIO_URLS,$AYAH_AUDIO_URL"
              else
                AUDIO_URLS="$AYAH_AUDIO_URL"
              fi
            fi
          done
          
          # If Yasser Al-Dosari audio not available, try alternative reciters for the range
          if [ -z "$AUDIO_URLS" ]; then
            echo "Yasser Al-Dosari audio not available, trying alternative reciters..."
            
            # Try to get surah audio with timestamp ranges instead
            ALAFASY_SURAH=$(curl -s "https://api.alquran.cloud/v1/surah/$RANDOM_SURAH/ar.alafasy")
            FIRST_AYAH_AUDIO=$(echo "$ALAFASY_SURAH" | jq -r ".data.ayahs[$((RANDOM_START_AYAH-1))].audio // \"\"")
            
            if [ -n "$FIRST_AYAH_AUDIO" ] && [ "$FIRST_AYAH_AUDIO" != "null" ]; then
              AUDIO_URLS="$FIRST_AYAH_AUDIO"
              RECITER="Mishari Al-Afasy"
            else
              RECITER="No Audio Available"
            fi
          else
            RECITER="Yasser Al-Dosari"
          fi
          
          echo "Combined Arabic text: $COMBINED_ARABIC_TEXT"
          echo "Audio URLs: $AUDIO_URLS"
          echo "Reciter: $RECITER"
          
          # Save to outputs
          echo "surah_number=$RANDOM_SURAH" >> $GITHUB_OUTPUT
          echo "start_ayah=$RANDOM_START_AYAH" >> $GITHUB_OUTPUT
          echo "end_ayah=$RANDOM_END_AYAH" >> $GITHUB_OUTPUT
          echo "ayah_count=$AYAH_COUNT" >> $GITHUB_OUTPUT
          echo "surah_name=$SURAH_NAME" >> $GITHUB_OUTPUT
          echo "surah_name_en=$SURAH_NAME_EN" >> $GITHUB_OUTPUT
          echo "arabic_text=$COMBINED_ARABIC_TEXT" >> $GITHUB_OUTPUT
          echo "audio_urls=$AUDIO_URLS" >> $GITHUB_OUTPUT
          echo "reciter=$RECITER" >> $GITHUB_OUTPUT
          
          # Save texts to files for FFmpeg
          echo "$COMBINED_ARABIC_TEXT" > temp/arabic_text.txt
          if [ "$RANDOM_START_AYAH" = "$RANDOM_END_AYAH" ]; then
            echo "[$SURAH_NAME_EN $RANDOM_SURAH:$RANDOM_START_AYAH]" > temp/reference.txt
          else
            echo "[$SURAH_NAME_EN $RANDOM_SURAH:$RANDOM_START_AYAH-$RANDOM_END_AYAH]" > temp/reference.txt
          fi
          
          # Split Arabic text using Quranic stops for natural grouping
          echo "Splitting Arabic text using Quranic stops..."
          
          # Common Quranic stop marks and pause indicators
          # ۚ (small high seen) - minor pause
          # ۛ (small high sad) - longer pause  
          # ۗ (small high qaf) - pause allowed
          # ۖ (small high meem) - pause preferred
          # ۘ (small high noon) - pause not allowed
          # Also split on punctuation and verse endings
          
          # First, let's see what stop marks are in the text
          echo "Original text: $ARABIC_TEXT"
          echo "Analyzing stop marks in the text..."
          
          # Create groups based on Quranic stops and natural pauses
          echo "$ARABIC_TEXT" > temp/full_text.txt
          
          # Split on various Quranic stop marks and natural break points
          # Use sed to insert newlines at stop marks, then clean up
          sed 's/۝//g' temp/full_text.txt | \
          sed 's/ۚ/ ۚ\n/g' | \
          sed 's/ۛ/ ۛ\n/g' | \
          sed 's/ۗ/ ۗ\n/g' | \
          sed 's/ۖ/ ۖ\n/g' | \
          sed 's/ۘ/ ۘ/g' | \
          sed 's/ۙ/ ۙ\n/g' | \
          sed 's/ۜ/ ۜ\n/g' | \
          sed 's/۞/ ۞\n/g' | \
          sed 's/۩/ ۩\n/g' | \
          sed 's/۬/ ۬\n/g' | \
          sed 's/ۭ/ ۭ\n/g' > temp/split_by_stops.txt
          
          # Clean up empty lines and create meaningful groups
          grep -v '^[[:space:]]*$' temp/split_by_stops.txt > temp/word_groups_raw.txt
          
          # If no stop marks found, fall back to word-based splitting
          if [ ! -s temp/word_groups_raw.txt ] || [ $(wc -l < temp/word_groups_raw.txt) -eq 1 ]; then
            echo "No Quranic stops found, using intelligent word grouping..."
            
            # Split into logical phrase groups (4-7 words per group)
            echo "$ARABIC_TEXT" | tr ' ' '\n' > temp/words.txt
            
            WORD_COUNT=0
            GROUP_COUNT=0
            CURRENT_GROUP=""
            
            while IFS= read -r word; do
              if [ -n "$word" ]; then
                if [ $WORD_COUNT -eq 0 ]; then
                  CURRENT_GROUP="$word"
                else
                  CURRENT_GROUP="$CURRENT_GROUP $word"
                fi
                WORD_COUNT=$((WORD_COUNT + 1))
                
                # Create groups of 4-7 words (vary for natural flow)
                GROUP_SIZE=6
                if [ $WORD_COUNT -ge $GROUP_SIZE ]; then
                  GROUP_COUNT=$((GROUP_COUNT + 1))
                  echo "$CURRENT_GROUP" >> temp/word_groups.txt
                  echo "Group $GROUP_COUNT: $CURRENT_GROUP"
                  CURRENT_GROUP=""
                  WORD_COUNT=0
                fi
              fi
            done < temp/words.txt
            
            # Add remaining words as final group
            if [ -n "$CURRENT_GROUP" ]; then
              GROUP_COUNT=$((GROUP_COUNT + 1))
              echo "$CURRENT_GROUP" >> temp/word_groups.txt
              echo "Group $GROUP_COUNT: $CURRENT_GROUP"
            fi
            
            echo "Created $GROUP_COUNT word-based groups"
          else
            # Use stop-mark based groups
            cp temp/word_groups_raw.txt temp/word_groups.txt
            GROUP_COUNT=$(wc -l < temp/word_groups.txt)
            
            echo "Created $GROUP_COUNT groups based on Quranic stops:"
            cat -n temp/word_groups.txt
          fi

      - name: Download and merge Quran audio
        id: audio
        run: |
          AUDIO_URLS="${{ steps.quran.outputs.audio_urls }}"
          
          if [ -n "$AUDIO_URLS" ] && [ "$AUDIO_URLS" != "null" ] && [ "$AUDIO_URLS" != "" ]; then
            echo "Processing audio URLs: $AUDIO_URLS"
            echo "Reciter: ${{ steps.quran.outputs.reciter }}"
            
            # Create array of URLs (split by comma)
            IFS=',' read -ra URL_ARRAY <<< "$AUDIO_URLS"
            AUDIO_COUNT=${#URL_ARRAY[@]}
            echo "Found $AUDIO_COUNT audio files to download"
            
            # Download each audio file
            AUDIO_FILES=""
            DOWNLOAD_SUCCESS=false
            
            for i in "${!URL_ARRAY[@]}"; do
              URL="${URL_ARRAY[$i]}"
              AUDIO_FILE="temp/quran_audio_$((i+1)).mp3"
              
              echo "Downloading audio $((i+1))/$AUDIO_COUNT from: $URL"
              
              if curl -L -f --retry 3 --retry-delay 2 -o "$AUDIO_FILE" "$URL"; then
                echo "Audio $((i+1)) downloaded successfully"
                
                # Verify it's a valid audio file
                if ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$AUDIO_FILE" > /dev/null 2>&1; then
                  AUDIO_SIZE=$(du -h "$AUDIO_FILE" | cut -f1)
                  echo "Audio $((i+1)) file size: $AUDIO_SIZE"
                  
                  if [ -n "$AUDIO_FILES" ]; then
                    AUDIO_FILES="$AUDIO_FILES -i $AUDIO_FILE"
                  else
                    AUDIO_FILES="-i $AUDIO_FILE"
                  fi
                  DOWNLOAD_SUCCESS=true
                else
                  echo "Downloaded file $((i+1)) is not a valid audio file"
                  rm -f "$AUDIO_FILE"
                fi
              else
                echo "Failed to download audio $((i+1)) from URL: $URL"
              fi
            done
            
            if [ "$DOWNLOAD_SUCCESS" = true ]; then
              # Concatenate audio files if multiple
              if [ "$AUDIO_COUNT" -gt 1 ]; then
                echo "Concatenating $AUDIO_COUNT audio files..."
                
                # Create concat filter
                CONCAT_FILTER=""
                for i in $(seq 0 $((AUDIO_COUNT-1))); do
                  if [ -f "temp/quran_audio_$((i+1)).mp3" ]; then
                    CONCAT_FILTER="${CONCAT_FILTER}[$i:a]"
                  fi
                done
                CONCAT_FILTER="${CONCAT_FILTER}concat=n=$AUDIO_COUNT:v=0:a=1[outa]"
                
                # Concatenate audio files
                eval "ffmpeg -y $AUDIO_FILES -filter_complex \"$CONCAT_FILTER\" -map \"[outa]\" temp/quran_audio_combined.mp3"
                
                if [ -f "temp/quran_audio_combined.mp3" ]; then
                  FINAL_AUDIO_PATH="temp/quran_audio_combined.mp3"
                  echo "Audio concatenation successful"
                else
                  # Fallback to first audio file
                  FINAL_AUDIO_PATH="temp/quran_audio_1.mp3"
                  echo "Audio concatenation failed, using first audio file"
                fi
              else
                FINAL_AUDIO_PATH="temp/quran_audio_1.mp3"
                echo "Using single audio file"
              fi
              
              # Get final audio duration
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$FINAL_AUDIO_PATH")
              echo "Final audio duration: $AUDIO_DURATION seconds"
              
              echo "audio_path=$FINAL_AUDIO_PATH" >> $GITHUB_OUTPUT
              echo "audio_duration=$AUDIO_DURATION" >> $GITHUB_OUTPUT
              echo "has_audio=true" >> $GITHUB_OUTPUT
              
              # Test final audio properties
              ffprobe -v quiet -print_format json -show_streams "$FINAL_AUDIO_PATH" | jq '.streams[0] | {codec_name, sample_rate, channels, duration}'
            else
              echo "No valid audio files downloaded"
              echo "has_audio=false" >> $GITHUB_OUTPUT
              echo "audio_duration=60" >> $GITHUB_OUTPUT
            fi
          else
            echo "No audio URLs available"
            echo "Audio URLs value: '$AUDIO_URLS'"
            echo "has_audio=false" >> $GITHUB_OUTPUT
            echo "audio_duration=60" >> $GITHUB_OUTPUT
          fi

      - name: Create Quran video
        run: |
          echo "Creating Quran video..."
          
          # Video parameters
          DURATION="${{ steps.audio.outputs.audio_duration }}"
          BACKGROUND_COLOR="${{ github.event.inputs.background_color }}"
          TEXT_COLOR="${{ github.event.inputs.text_color }}"
          ARABIC_FONT_SIZE="${{ github.event.inputs.font_size_arabic }}"
          
          # Video dimensions for 9:16 aspect ratio
          WIDTH=1080
          HEIGHT=1920
          
          # Find the best Arabic font file path
          ARABIC_FONT_PATH=""
          
          # Try to find Arabic fonts in order of preference
          if fc-list :lang=ar | grep -i "amiri" > /dev/null; then
            ARABIC_FONT_PATH=$(fc-list :lang=ar | grep -i "amiri" | head -1 | cut -d: -f1)
          elif fc-list :lang=ar | grep -i "scheherazade" > /dev/null; then
            ARABIC_FONT_PATH=$(fc-list :lang=ar | grep -i "scheherazade" | head -1 | cut -d: -f1)
          elif fc-list :lang=ar | grep -i "kacst" > /dev/null; then
            ARABIC_FONT_PATH=$(fc-list :lang=ar | grep -i "kacst" | head -1 | cut -d: -f1)
          elif fc-list :lang=ar | grep -i "noto" > /dev/null; then
            ARABIC_FONT_PATH=$(fc-list :lang=ar | grep -i "noto" | head -1 | cut -d: -f1)
          else
            # Fallback to any font file
            ARABIC_FONT_PATH=$(fc-list | head -1 | cut -d: -f1 || echo "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf")
          fi
          
          # If no font found, use system default
          if [ -z "$ARABIC_FONT_PATH" ] || [ ! -f "$ARABIC_FONT_PATH" ]; then
            ARABIC_FONT_PATH="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
          fi
          
          echo "Using Arabic font: $ARABIC_FONT_PATH"
          
          # Read texts and create animated word groups
          REFERENCE=$(cat temp/reference.txt)
          
          # Count word groups for timing calculation
          TOTAL_GROUPS=$(wc -l < temp/word_groups.txt)
          echo "Total word groups: $TOTAL_GROUPS"
          
          # Calculate timing for each group based on audio duration
          GROUP_DURATION=$(echo "scale=2; $DURATION / $TOTAL_GROUPS" | bc)
          echo "Duration per group: $GROUP_DURATION seconds"
          
          # Escape reference text for FFmpeg
          REFERENCE=$(echo "$REFERENCE" | sed "s/'/'\\\\''/g" | sed 's/"/\\"/g')
          
          echo "Reference: $REFERENCE"
          echo "Creating animated text video..."
          
          # Generate video with animated word-by-word display
          if [ "${{ steps.audio.outputs.has_audio }}" = "true" ]; then
            echo "Creating animated video with Quran audio (${{ steps.quran.outputs.reciter }})..."
            echo "Audio file: ${{ steps.audio.outputs.audio_path }}"
            echo "Audio duration: ${{ steps.audio.outputs.audio_duration }} seconds"
            
            # Build animated text filter
            FILTER_COMPLEX="[0:v]"
            GROUP_NUM=0
            
            while IFS= read -r group; do
              if [ -n "$group" ]; then
                # Escape the text for FFmpeg
                ESCAPED_GROUP=$(echo "$group" | sed "s/'/'\\\\''/g" | sed 's/"/\\"/g')
                
                # Calculate timing for this group
                START_TIME=$(echo "scale=2; $GROUP_NUM * $GROUP_DURATION" | bc)
                END_TIME=$(echo "scale=2; ($GROUP_NUM + 1) * $GROUP_DURATION" | bc)
                
                echo "Group $((GROUP_NUM + 1)): '$group' (${START_TIME}s - ${END_TIME}s)"
                
                # Add drawtext filter for this group
                FILTER_COMPLEX="${FILTER_COMPLEX}drawtext=text='${ESCAPED_GROUP}':fontfile='${ARABIC_FONT_PATH}':fontsize=${ARABIC_FONT_SIZE}:fontcolor=${TEXT_COLOR}:x=(w-text_w)/2:y=(h-text_h)/2:box=1:boxcolor=black@0.4:boxborderw=15:enable='between(t,${START_TIME},${END_TIME})',"
                
                GROUP_NUM=$((GROUP_NUM + 1))
              fi
            done < temp/word_groups.txt
            
            # Remove trailing comma and add reference text
            FILTER_COMPLEX="${FILTER_COMPLEX%,}[animated_text];"
            FILTER_COMPLEX="${FILTER_COMPLEX}[animated_text]drawtext=text='${REFERENCE}':fontsize=40:fontcolor=${TEXT_COLOR}:x=(w-text_w)/2:y=h-text_h-150:box=1:boxcolor=black@0.5:boxborderw=8[final]"
            
            echo "Starting FFmpeg with animated text..."
            
            # Verify audio file exists before processing
            if [ -f "${{ steps.audio.outputs.audio_path }}" ]; then
              ffmpeg -y \
                -f lavfi -i "color=c=${BACKGROUND_COLOR}:size=${WIDTH}x${HEIGHT}:duration=${DURATION}:rate=25" \
                -i "${{ steps.audio.outputs.audio_path }}" \
                -filter_complex "${FILTER_COMPLEX}" \
                -map "[final]" -map 1:a \
                -c:v libx264 -c:a aac \
                -r 25 -pix_fmt yuv420p \
                -shortest \
                -movflags +faststart \
                "${{ steps.output.outputs.unique_output }}"
            else
              echo "ERROR: Audio file not found at ${{ steps.audio.outputs.audio_path }}"
              echo "Creating silent animated video instead..."
              ffmpeg -y \
                -f lavfi -i "color=c=${BACKGROUND_COLOR}:size=${WIDTH}x${HEIGHT}:duration=${DURATION}:rate=25" \
                -filter_complex "${FILTER_COMPLEX}" \
                -map "[final]" \
                -c:v libx264 \
                -r 25 -pix_fmt yuv420p \
                -t "${DURATION}" \
                -movflags +faststart \
                "${{ steps.output.outputs.unique_output }}"
            fi
          else
            echo "Creating silent animated video (no audio available)..."
            
            # Build the same animated filter for silent video
            FILTER_COMPLEX="[0:v]"
            GROUP_NUM=0
            
            while IFS= read -r group; do
              if [ -n "$group" ]; then
                ESCAPED_GROUP=$(echo "$group" | sed "s/'/'\\\\''/g" | sed 's/"/\\"/g')
                START_TIME=$(echo "scale=2; $GROUP_NUM * $GROUP_DURATION" | bc)
                END_TIME=$(echo "scale=2; ($GROUP_NUM + 1) * $GROUP_DURATION" | bc)
                
                FILTER_COMPLEX="${FILTER_COMPLEX}drawtext=text='${ESCAPED_GROUP}':fontfile='${ARABIC_FONT_PATH}':fontsize=${ARABIC_FONT_SIZE}:fontcolor=${TEXT_COLOR}:x=(w-text_w)/2:y=(h-text_h)/2:box=1:boxcolor=black@0.4:boxborderw=15:enable='between(t,${START_TIME},${END_TIME})',"
                
                GROUP_NUM=$((GROUP_NUM + 1))
              fi
            done < temp/word_groups.txt
            
            FILTER_COMPLEX="${FILTER_COMPLEX%,}[animated_text];"
            FILTER_COMPLEX="${FILTER_COMPLEX}[animated_text]drawtext=text='${REFERENCE}':fontsize=40:fontcolor=${TEXT_COLOR}:x=(w-text_w)/2:y=h-text_h-150:box=1:boxcolor=black@0.5:boxborderw=8[final]"
            
            ffmpeg -y \
              -f lavfi -i "color=c=${BACKGROUND_COLOR}:size=${WIDTH}x${HEIGHT}:duration=${DURATION}:rate=25" \
              -filter_complex "${FILTER_COMPLEX}" \
              -map "[final]" \
              -c:v libx264 \
              -r 25 -pix_fmt yuv420p \
              -t "${DURATION}" \
              -movflags +faststart \
              "${{ steps.output.outputs.unique_output }}"
          fi
          
          echo "Video creation completed!"
          echo "Output file size: $(du -h "${{ steps.output.outputs.unique_output }}" | cut -f1)"

      - name: Verify video output
        run: |
          if [ -f "${{ steps.output.outputs.unique_output }}" ]; then
            echo "Video file created successfully!"
            echo "File size: $(du -h "${{ steps.output.outputs.unique_output }}" | cut -f1)"
            
            # Get video information
            ffprobe -v quiet -print_format json -show_format -show_streams "${{ steps.output.outputs.unique_output }}" > temp/video_info.json
            
            WIDTH=$(jq -r '.streams[] | select(.codec_type=="video") | .width' temp/video_info.json)
            HEIGHT=$(jq -r '.streams[] | select(.codec_type=="video") | .height' temp/video_info.json)
            DURATION=$(jq -r '.format.duration' temp/video_info.json)
            
            echo "Video dimensions: ${WIDTH}x${HEIGHT}"
            echo "Video duration: ${DURATION} seconds"
            echo "Aspect ratio: $(echo "scale=2; $HEIGHT/$WIDTH" | bc)"
            
            # Verify it's 9:16 aspect ratio
            ASPECT_CHECK=$(echo "scale=2; $HEIGHT/$WIDTH" | bc)
            echo "Expected aspect ratio: 1.78 (9:16)"
            echo "Actual aspect ratio: $ASPECT_CHECK"
          else
            echo "Error: Video file was not created!"
            exit 1
          fi

      - name: Upload video as artifact
        uses: actions/upload-artifact@v4
        with:
          name: quran-video
          path: ${{ steps.output.outputs.unique_output }}

      - name: Commit video file
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Add the generated file to git
          git add "${{ steps.output.outputs.unique_output }}"
          
          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes staged for commit"
          else
            if [ "${{ steps.quran.outputs.start_ayah }}" = "${{ steps.quran.outputs.end_ayah }}" ]; then
              git commit -m "Add Quran video: ${{ steps.quran.outputs.surah_name_en }} ${{ steps.quran.outputs.surah_number }}:${{ steps.quran.outputs.start_ayah }}"
            else
              git commit -m "Add Quran video: ${{ steps.quran.outputs.surah_name_en }} ${{ steps.quran.outputs.surah_number }}:${{ steps.quran.outputs.start_ayah }}-${{ steps.quran.outputs.end_ayah }}"
            fi
            git push
            echo "Changes committed and pushed successfully"
          fi

      - name: Generate output URLs
        id: urls
        run: |
          OUTPUT_FILE="${{ steps.output.outputs.unique_output }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          FILE_URL="${REPO_URL}/blob/${BRANCH}/${OUTPUT_FILE}"
          RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${BRANCH}/${OUTPUT_FILE}"
          
          echo "file_url=${FILE_URL}" >> $GITHUB_OUTPUT
          echo "raw_url=${RAW_URL}" >> $GITHUB_OUTPUT
          echo "filename=$(basename "${OUTPUT_FILE}")" >> $GITHUB_OUTPUT
          
          echo "Generated URLs:"
          echo "File URL: ${FILE_URL}"
          echo "Raw URL: ${RAW_URL}"

      - name: Cleanup temporary files
        run: |
          echo "Cleaning up temporary files..."
          
          if [ -d "temp" ]; then
            rm -rf temp
            echo "Removed temp directory"
          fi
          
          # Remove old Quran videos (keep only last 10)
          if [ -d "output" ]; then
            OLD_FILES=$(find output -name "quran_video_*.mp4" -type f | sort -r | tail -n +11)
            if [ -n "$OLD_FILES" ]; then
              echo "Removing old Quran videos:"
              echo "$OLD_FILES"
              echo "$OLD_FILES" | xargs rm -f
              
              # Commit cleanup
              if [ -n "$(git status --porcelain)" ]; then
                git add -A
                git commit -m "Auto-cleanup: Remove old Quran videos [skip ci]"
                git push
                echo "Cleanup committed"
              fi
            fi
          fi

      - name: Display final summary
        run: |
          echo "=================================="
          echo "🕌 QURAN VIDEO GENERATION COMPLETE"
          echo "=================================="
          echo "Surah: ${{ steps.quran.outputs.surah_name_en }} (${{ steps.quran.outputs.surah_name }})"
          if [ "${{ steps.quran.outputs.start_ayah }}" = "${{ steps.quran.outputs.end_ayah }}" ]; then
            echo "Ayah: ${{ steps.quran.outputs.surah_number }}:${{ steps.quran.outputs.start_ayah }}"
          else
            echo "Ayahs: ${{ steps.quran.outputs.surah_number }}:${{ steps.quran.outputs.start_ayah }}-${{ steps.quran.outputs.end_ayah }} (${{ steps.quran.outputs.ayah_count }} ayahs)"
          fi
          echo "Reciter: ${{ steps.quran.outputs.reciter }}"
          echo "Output: ${{ steps.output.outputs.unique_output }}"
          echo "File URL: ${{ steps.urls.outputs.file_url }}"
          echo "Raw URL: ${{ steps.urls.outputs.raw_url }}"
          echo "Has Audio: ${{ steps.audio.outputs.has_audio }}"
          echo "=================================="

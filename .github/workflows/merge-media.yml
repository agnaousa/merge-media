name: Merge Audio and Video

permissions:
  contents: write  # âœ… This line gives write access to the repository

on:
  workflow_dispatch:
    inputs:
      video_path:
        description: "Path to the video file"
        required: true
        default: "input/video.mp4"
      audio_path:
        description: "Path to the audio file"
        required: true
        default: "input/audio.mp3"
      output_path:
        description: "Path for the output merged file"
        required: true
        default: "output/merged.mp4"
      audio_handling:
        description: "How to handle existing video audio"
        required: false
        default: "replace"
        type: choice
        options:
          - "replace"
          - "mix"
          - "keep_video"

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Generate unique output filename
        id: output
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          RUN_ID=${{ github.run_id }}
          BASENAME=$(basename "${{ github.event.inputs.output_path }}" .mp4)
          DIRNAME=$(dirname "${{ github.event.inputs.output_path }}")
          UNIQUE_OUTPUT="${DIRNAME}/${BASENAME}_${TIMESTAMP}_${RUN_ID}.mp4"
          echo "unique_output=${UNIQUE_OUTPUT}" >> $GITHUB_OUTPUT
          echo "Generated unique output path: ${UNIQUE_OUTPUT}"

      - name: Validate input files
        run: |
          if [ ! -f "${{ github.event.inputs.video_path }}" ]; then
            echo "Error: Video file not found at ${{ github.event.inputs.video_path }}"
            exit 1
          fi
          if [ ! -f "${{ github.event.inputs.audio_path }}" ]; then
            echo "Error: Audio file not found at ${{ github.event.inputs.audio_path }}"
            exit 1
          fi
          echo "Input files validated successfully"

      - name: Create output directory
        run: |
          mkdir -p "$(dirname "${{ steps.output.outputs.unique_output }}")"
          echo "Output directory created: $(dirname "${{ steps.output.outputs.unique_output }}")"

      - name: Merge audio with video
        run: |
          echo "Starting merge process..."
          echo "Video: ${{ github.event.inputs.video_path }}"
          echo "Audio: ${{ github.event.inputs.audio_path }}"
          echo "Output: ${{ steps.output.outputs.unique_output }}"
          echo "Audio handling: ${{ github.event.inputs.audio_handling }}"
          
          case "${{ github.event.inputs.audio_handling }}" in
            "replace")
              echo "Replacing video audio with new audio..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ github.event.inputs.audio_path }}")
              ffmpeg -y \
                     -i "${{ github.event.inputs.video_path }}" \
                     -i "${{ github.event.inputs.audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            "mix")
              echo "Mixing video audio with new audio..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ github.event.inputs.audio_path }}")
              ffmpeg -y \
                     -i "${{ github.event.inputs.video_path }}" \
                     -i "${{ github.event.inputs.audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]; [0:a][1:a]amix=inputs=2:duration=longest[a]" \
                     -map "[v]" \
                     -map "[a]" \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            "keep_video")
              echo "Keeping original video audio, ignoring new audio..."
              ffmpeg -y \
                     -i "${{ github.event.inputs.video_path }}" \
                     -c:v copy \
                     -c:a aac \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            *)
              echo "Unknown audio handling option: ${{ github.event.inputs.audio_handling }}"
              echo "Defaulting to replace mode..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ github.event.inputs.audio_path }}")
              ffmpeg -y \
                     -i "${{ github.event.inputs.video_path }}" \
                     -i "${{ github.event.inputs.audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
          esac
          
          echo "Merge completed successfully!"
          echo "Output file size: $(du -h "${{ steps.output.outputs.unique_output }}" | cut -f1)"

      - name: Upload merged file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-video
          path: ${{ steps.output.outputs.unique_output }}

      - name: Commit merged file
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Add the generated file to git
          git add "${{ steps.output.outputs.unique_output }}"
          
          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes staged for commit (file may already exist or wasn't created)"
          else
            git commit -m "Add merged video: ${{ steps.output.outputs.unique_output }}"
            git push
            echo "Changes committed and pushed successfully"
          fi

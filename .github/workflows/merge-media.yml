name: Merge Audio and Video (Multipart Form Data)

permissions:
  contents: write
  actions: write

on:
  repository_dispatch:
    types: [merge-media]
  workflow_dispatch:
    inputs:
      video_base64:
        description: "Base64 encoded video data"
        required: false
        default: ""
      audio_base64:
        description: "Base64 encoded audio data"
        required: false
        default: ""
      video_url:
        description: "Video URL (if not using base64)"
        required: false
        default: ""
      audio_url:
        description: "Audio URL (if not using base64)"
        required: false
        default: ""
      output_name:
        description: "Output filename (without extension)"
        required: false
        default: "merged_output"
      audio_handling:
        description: "How to handle existing video audio"
        required: false
        default: "replace"
        type: choice
        options:
          - "replace"
          - "mix"
          - "keep_video"


jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq curl

      - name: Parse input data
        id: parse
        run: |
          # Set default values
          VIDEO_BASE64=""
          AUDIO_BASE64=""
          VIDEO_URL=""
          AUDIO_URL=""
          OUTPUT_NAME="merged_output"
          AUDIO_HANDLING="replace"
          
          # Check if this is a repository_dispatch event
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Processing repository_dispatch event..."
            
            # Parse client_payload for multipart data
            if [ -n "${{ github.event.client_payload.video_base64 }}" ]; then
              VIDEO_BASE64="${{ github.event.client_payload.video_base64 }}"
              echo "Found video base64 data in payload"
            fi
            
            if [ -n "${{ github.event.client_payload.audio_base64 }}" ]; then
              AUDIO_BASE64="${{ github.event.client_payload.audio_base64 }}"
              echo "Found audio base64 data in payload"
            fi
            
            if [ -n "${{ github.event.client_payload.video_url }}" ]; then
              VIDEO_URL="${{ github.event.client_payload.video_url }}"
              echo "Found video URL in payload"
            fi
            
            if [ -n "${{ github.event.client_payload.audio_url }}" ]; then
              AUDIO_URL="${{ github.event.client_payload.audio_url }}"
              echo "Found audio URL in payload"
            fi
            
            if [ -n "${{ github.event.client_payload.output_name }}" ]; then
              OUTPUT_NAME="${{ github.event.client_payload.output_name }}"
            fi
            
            if [ -n "${{ github.event.client_payload.audio_handling }}" ]; then
              AUDIO_HANDLING="${{ github.event.client_payload.audio_handling }}"
            fi
          else
            echo "Processing workflow_dispatch event..."
            
            # Use workflow inputs
            VIDEO_BASE64="${{ github.event.inputs.video_base64 }}"
            AUDIO_BASE64="${{ github.event.inputs.audio_base64 }}"
            VIDEO_URL="${{ github.event.inputs.video_url }}"
            AUDIO_URL="${{ github.event.inputs.audio_url }}"
            OUTPUT_NAME="${{ github.event.inputs.output_name }}"
            AUDIO_HANDLING="${{ github.event.inputs.audio_handling }}"
          fi
          
          # Export variables for later steps
          echo "video_base64=${VIDEO_BASE64}" >> $GITHUB_OUTPUT
          echo "audio_base64=${AUDIO_BASE64}" >> $GITHUB_OUTPUT
          echo "video_url=${VIDEO_URL}" >> $GITHUB_OUTPUT
          echo "audio_url=${AUDIO_URL}" >> $GITHUB_OUTPUT
          echo "output_name=${OUTPUT_NAME}" >> $GITHUB_OUTPUT
          echo "audio_handling=${AUDIO_HANDLING}" >> $GITHUB_OUTPUT
          
          echo "Parsed input parameters successfully"

      - name: Prepare media files
        id: prepare
        run: |
          mkdir -p temp
          
          # Process video input
          if [ -n "${{ steps.parse.outputs.video_base64 }}" ] && [ "${{ steps.parse.outputs.video_base64 }}" != "" ]; then
            echo "Processing base64 video data..."
            
            # Detect video format from base64 header
            HEADER=$(echo "${{ steps.parse.outputs.video_base64 }}" | head -c 20)
            case "$HEADER" in
              *"AAAAIGZ"*|*"ftypmp4"*) VIDEO_EXT="mp4" ;;
              *"AAAAFGZ"*) VIDEO_EXT="mov" ;;
              *"1a45dfa3"*) VIDEO_EXT="mkv" ;;
              *) VIDEO_EXT="mp4" ;; # default
            esac
            
            VIDEO_FILE="temp/input_video.${VIDEO_EXT}"
            echo "${{ steps.parse.outputs.video_base64 }}" | base64 -d > "$VIDEO_FILE"
            
            if [ ! -s "$VIDEO_FILE" ]; then
              echo "Error: Failed to decode video base64 data"
              exit 1
            fi
            
            echo "Video decoded successfully ($(du -h "$VIDEO_FILE" | cut -f1))"
            echo "video_file=${VIDEO_FILE}" >> $GITHUB_OUTPUT
            
          elif [ -n "${{ steps.parse.outputs.video_url }}" ] && [ "${{ steps.parse.outputs.video_url }}" != "" ]; then
            echo "Downloading video from URL..."
            
            VIDEO_EXT=$(echo "${{ steps.parse.outputs.video_url }}" | grep -oE '\.(mp4|avi|mov|mkv|webm)(\?.*)?$' | sed 's/\?.*//' | sed 's/\.//' || echo "mp4")
            VIDEO_FILE="temp/input_video.${VIDEO_EXT}"
            
            if ! curl -L -f -o "$VIDEO_FILE" "${{ steps.parse.outputs.video_url }}"; then
              echo "Error: Failed to download video from URL"
              exit 1
            fi
            
            echo "Video downloaded successfully ($(du -h "$VIDEO_FILE" | cut -f1))"
            echo "video_file=${VIDEO_FILE}" >> $GITHUB_OUTPUT
          else
            echo "Error: No video input provided (base64 or URL)"
            exit 1
          fi
          
          # Process audio input
          if [ -n "${{ steps.parse.outputs.audio_base64 }}" ] && [ "${{ steps.parse.outputs.audio_base64 }}" != "" ]; then
            echo "Processing base64 audio data..."
            
            # Detect audio format from base64 header
            HEADER=$(echo "${{ steps.parse.outputs.audio_base64 }}" | head -c 20)
            case "$HEADER" in
              *"ID3"*|*"/+MYQ"*) AUDIO_EXT="mp3" ;;
              *"RIFF"*) AUDIO_EXT="wav" ;;
              *"fLaC"*) AUDIO_EXT="flac" ;;
              *"OggS"*) AUDIO_EXT="ogg" ;;
              *) AUDIO_EXT="mp3" ;; # default
            esac
            
            AUDIO_FILE="temp/input_audio.${AUDIO_EXT}"
            echo "${{ steps.parse.outputs.audio_base64 }}" | base64 -d > "$AUDIO_FILE"
            
            if [ ! -s "$AUDIO_FILE" ]; then
              echo "Error: Failed to decode audio base64 data"
              exit 1
            fi
            
            echo "Audio decoded successfully ($(du -h "$AUDIO_FILE" | cut -f1))"
            echo "audio_file=${AUDIO_FILE}" >> $GITHUB_OUTPUT
            
          elif [ -n "${{ steps.parse.outputs.audio_url }}" ] && [ "${{ steps.parse.outputs.audio_url }}" != "" ]; then
            echo "Downloading audio from URL..."
            
            AUDIO_EXT=$(echo "${{ steps.parse.outputs.audio_url }}" | grep -oE '\.(mp3|wav|aac|ogg|flac)(\?.*)?$' | sed 's/\?.*//' | sed 's/\.//' || echo "mp3")
            AUDIO_FILE="temp/input_audio.${AUDIO_EXT}"
            
            if ! curl -L -f -o "$AUDIO_FILE" "${{ steps.parse.outputs.audio_url }}"; then
              echo "Error: Failed to download audio from URL"
              exit 1
            fi
            
            echo "Audio downloaded successfully ($(du -h "$AUDIO_FILE" | cut -f1))"
            echo "audio_file=${AUDIO_FILE}" >> $GITHUB_OUTPUT
          else
            echo "Error: No audio input provided (base64 or URL)"
            exit 1
          fi

      - name: Validate media files
        run: |
          echo "Validating input files..."
          
          # Check video file
          if ! ffprobe -v quiet -show_entries format=duration "${{ steps.prepare.outputs.video_file }}" 2>/dev/null; then
            echo "Error: Invalid video file"
            exit 1
          fi
          
          # Check audio file
          if ! ffprobe -v quiet -show_entries format=duration "${{ steps.prepare.outputs.audio_file }}" 2>/dev/null; then
            echo "Error: Invalid audio file"
            exit 1
          fi
          
          # Get durations
          VIDEO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.prepare.outputs.video_file }}")
          AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.prepare.outputs.audio_file }}")
          
          echo "Video duration: ${VIDEO_DURATION}s"
          echo "Audio duration: ${AUDIO_DURATION}s"
          echo "Files validated successfully"

      - name: Merge media files
        id: merge
        run: |
          # Create output directory
          mkdir -p output
          
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          OUTPUT_FILE="output/${{ steps.parse.outputs.output_name }}_${TIMESTAMP}.mp4"
          
          echo "Starting merge process..."
          echo "Video: ${{ steps.prepare.outputs.video_file }}"
          echo "Audio: ${{ steps.prepare.outputs.audio_file }}"
          echo "Output: ${OUTPUT_FILE}"
          echo "Audio handling: ${{ steps.parse.outputs.audio_handling }}"
          
          # Get audio duration for video looping
          AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.prepare.outputs.audio_file }}")
          
          case "${{ steps.parse.outputs.audio_handling }}" in
            "replace")
              echo "Replacing video audio with new audio..."
              ffmpeg -y \
                     -i "${{ steps.prepare.outputs.video_file }}" \
                     -i "${{ steps.prepare.outputs.audio_file }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 -preset medium -crf 23 \
                     -c:a aac -b:a 128k \
                     -t ${AUDIO_DURATION} \
                     -movflags +faststart \
                     "$OUTPUT_FILE"
              ;;
            "mix")
              echo "Mixing video audio with new audio..."
              ffmpeg -y \
                     -i "${{ steps.prepare.outputs.video_file }}" \
                     -i "${{ steps.prepare.outputs.audio_file }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[v]; [0:a][1:a]amix=inputs=2:duration=longest:weights=0.5,0.5[a]" \
                     -map "[v]" \
                     -map "[a]" \
                     -c:v libx264 -preset medium -crf 23 \
                     -c:a aac -b:a 128k \
                     -t ${AUDIO_DURATION} \
                     -movflags +faststart \
                     "$OUTPUT_FILE"
              ;;
            "keep_video")
              echo "Keeping original video audio..."
              ffmpeg -y \
                     -i "${{ steps.prepare.outputs.video_file }}" \
                     -c:v libx264 -preset medium -crf 23 \
                     -c:a aac -b:a 128k \
                     -movflags +faststart \
                     "$OUTPUT_FILE"
              ;;
            *)
              echo "Unknown audio handling option, defaulting to replace..."
              ffmpeg -y \
                     -i "${{ steps.prepare.outputs.video_file }}" \
                     -i "${{ steps.prepare.outputs.audio_file }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 -preset medium -crf 23 \
                     -c:a aac -b:a 128k \
                     -t ${AUDIO_DURATION} \
                     -movflags +faststart \
                     "$OUTPUT_FILE"
              ;;
          esac
          
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "Error: Merge failed - output file not created"
            exit 1
          fi
          
          echo "output_file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
          echo "Merge completed successfully!"
          echo "Output file size: $(du -h "$OUTPUT_FILE" | cut -f1)"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-video-${{ github.run_id }}
          path: ${{ steps.merge.outputs.output_file }}
          retention-days: 30

      - name: Commit and push output
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add "${{ steps.merge.outputs.output_file }}"
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add merged video: $(basename '${{ steps.merge.outputs.output_file }}')"
            git push
            echo "Output file committed and pushed successfully"
          fi

      - name: Generate access URLs
        id: urls
        run: |
          OUTPUT_FILE="${{ steps.merge.outputs.output_file }}"
          FILENAME=$(basename "$OUTPUT_FILE")
          
          # GitHub URLs
          REPO_URL="https://github.com/${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          FILE_URL="${REPO_URL}/blob/${BRANCH}/${OUTPUT_FILE}"
          RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${BRANCH}/${OUTPUT_FILE}"
          
          # Artifact URL (temporary)
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT
          echo "file_url=${FILE_URL}" >> $GITHUB_OUTPUT
          echo "raw_url=${RAW_URL}" >> $GITHUB_OUTPUT
          echo "artifact_url=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
          
          echo "=== MERGE COMPLETE ==="
          echo "Filename: ${FILENAME}"
          echo "GitHub File: ${FILE_URL}"
          echo "Direct Download: ${RAW_URL}"
          echo "Artifact: ${ARTIFACT_URL}"
          echo "======================"

      - name: Cleanup temporary files
        if: always()
        run: |
          rm -rf temp/
          echo "Temporary files cleaned up"

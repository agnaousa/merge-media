name: Merge Audio and Video

permissions:
  contents: write  # âœ… This line gives write access to the repository

on:
  workflow_dispatch:
    inputs:
      video_path:
        description: "Path to the video file or URL"
        required: true
        default: "input/video.mp4"
      audio_path:
        description: "Path to the audio file or URL"
        required: true
        default: "input/audio.mp3"
      output_path:
        description: "Path for the output merged file"
        required: true
        default: "output/merged.mp4"
      audio_handling:
        description: "How to handle existing video audio"
        required: false
        default: "replace"
        type: choice
        options:
          - "replace"
          - "mix"
          - "keep_video"
  repository_dispatch:
    types: [merge-media]
  push:
    paths:
      - 'webhook-trigger.json'

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Parse input parameters
        id: params
        run: |
          # Install jq if needed for JSON parsing
          which jq || sudo apt-get update && sudo apt-get install -y jq
          
          # Determine the source of the trigger and extract parameters
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Triggered via workflow_dispatch"
            echo "video_path=${{ github.event.inputs.video_path }}" >> $GITHUB_OUTPUT
            echo "audio_path=${{ github.event.inputs.audio_path }}" >> $GITHUB_OUTPUT
            echo "output_path=${{ github.event.inputs.output_path }}" >> $GITHUB_OUTPUT
            echo "audio_handling=${{ github.event.inputs.audio_handling }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Triggered via repository_dispatch (webhook)"
            echo "video_path=${{ github.event.client_payload.video_path || 'input/video.mp4' }}" >> $GITHUB_OUTPUT
            echo "audio_path=${{ github.event.client_payload.audio_path || 'input/audio.mp3' }}" >> $GITHUB_OUTPUT
            echo "output_path=${{ github.event.client_payload.output_path || 'output/merged.mp4' }}" >> $GITHUB_OUTPUT
            echo "audio_handling=${{ github.event.client_payload.audio_handling || 'replace' }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Triggered via push to webhook-trigger.json"
            # Read parameters from the webhook-trigger.json file
            if [ -f "webhook-trigger.json" ]; then
              VIDEO_PATH=$(jq -r '.video_path // "input/video.mp4"' webhook-trigger.json)
              AUDIO_PATH=$(jq -r '.audio_path // "input/audio.mp3"' webhook-trigger.json)
              OUTPUT_PATH=$(jq -r '.output_path // "output/merged.mp4"' webhook-trigger.json)
              AUDIO_HANDLING=$(jq -r '.audio_handling // "replace"' webhook-trigger.json)
              echo "video_path=${VIDEO_PATH}" >> $GITHUB_OUTPUT
              echo "audio_path=${AUDIO_PATH}" >> $GITHUB_OUTPUT
              echo "output_path=${OUTPUT_PATH}" >> $GITHUB_OUTPUT
              echo "audio_handling=${AUDIO_HANDLING}" >> $GITHUB_OUTPUT
            else
              echo "webhook-trigger.json not found, using defaults"
              echo "video_path=input/video.mp4" >> $GITHUB_OUTPUT
              echo "audio_path=input/audio.mp3" >> $GITHUB_OUTPUT
              echo "output_path=output/merged.mp4" >> $GITHUB_OUTPUT
              echo "audio_handling=replace" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Set up FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Download media files if URLs provided
        id: download
        run: |
          VIDEO_PATH="${{ steps.params.outputs.video_path }}"
          AUDIO_PATH="${{ steps.params.outputs.audio_path }}"
          
          # Function to check if a string is a URL
          is_url() {
            echo "$1" | grep -E "^https?://" > /dev/null
          }
          
          # Handle video input
          if is_url "$VIDEO_PATH"; then
            echo "Video input is a URL: $VIDEO_PATH"
            echo "Downloading video file..."
            mkdir -p temp
            VIDEO_EXT=$(echo "$VIDEO_PATH" | grep -oE '\.(mp4|avi|mov|mkv|webm|flv)(\?.*)?$' | sed 's/\?.*//' || echo ".mp4")
            LOCAL_VIDEO_PATH="temp/downloaded_video${VIDEO_EXT}"
            
            if curl -L -o "$LOCAL_VIDEO_PATH" "$VIDEO_PATH"; then
              echo "Video downloaded successfully"
              echo "local_video_path=$LOCAL_VIDEO_PATH" >> $GITHUB_OUTPUT
            else
              echo "Failed to download video from URL"
              exit 1
            fi
          else
            echo "Video input is a local path: $VIDEO_PATH"
            echo "local_video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          fi
          
          # Handle audio input
          if is_url "$AUDIO_PATH"; then
            echo "Audio input is a URL: $AUDIO_PATH"
            echo "Downloading audio file..."
            mkdir -p temp
            AUDIO_EXT=$(echo "$AUDIO_PATH" | grep -oE '\.(mp3|wav|aac|ogg|m4a|flac)(\?.*)?$' | sed 's/\?.*//' || echo ".mp3")
            LOCAL_AUDIO_PATH="temp/downloaded_audio${AUDIO_EXT}"
            
            if curl -L -o "$LOCAL_AUDIO_PATH" "$AUDIO_PATH"; then
              echo "Audio downloaded successfully"
              echo "local_audio_path=$LOCAL_AUDIO_PATH" >> $GITHUB_OUTPUT
            else
              echo "Failed to download audio from URL"
              exit 1
            fi
          else
            echo "Audio input is a local path: $AUDIO_PATH"
            echo "local_audio_path=$AUDIO_PATH" >> $GITHUB_OUTPUT
          fi

      - name: Generate unique output filename
        id: output
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          RUN_ID=${{ github.run_id }}
          BASENAME=$(basename "${{ steps.params.outputs.output_path }}" .mp4)
          DIRNAME=$(dirname "${{ steps.params.outputs.output_path }}")
          UNIQUE_OUTPUT="${DIRNAME}/${BASENAME}_${TIMESTAMP}_${RUN_ID}.mp4"
          echo "unique_output=${UNIQUE_OUTPUT}" >> $GITHUB_OUTPUT
          echo "Generated unique output path: ${UNIQUE_OUTPUT}"

      - name: Validate input files
        run: |
          if [ ! -f "${{ steps.download.outputs.local_video_path }}" ]; then
            echo "Error: Video file not found at ${{ steps.download.outputs.local_video_path }}"
            exit 1
          fi
          if [ ! -f "${{ steps.download.outputs.local_audio_path }}" ]; then
            echo "Error: Audio file not found at ${{ steps.download.outputs.local_audio_path }}"
            exit 1
          fi
          echo "Input files validated successfully"

      - name: Create output directory
        run: |
          mkdir -p "$(dirname "${{ steps.output.outputs.unique_output }}")"
          echo "Output directory created: $(dirname "${{ steps.output.outputs.unique_output }}")"

      - name: Merge audio with video
        run: |
          echo "Starting merge process..."
          echo "Video: ${{ steps.params.outputs.video_path }}"
          echo "Audio: ${{ steps.params.outputs.audio_path }}"
          echo "Local Video: ${{ steps.download.outputs.local_video_path }}"
          echo "Local Audio: ${{ steps.download.outputs.local_audio_path }}"
          echo "Output: ${{ steps.output.outputs.unique_output }}"
          echo "Audio handling: ${{ steps.params.outputs.audio_handling }}"
          
          case "${{ steps.params.outputs.audio_handling }}" in
            "replace")
              echo "Replacing video audio with new audio..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_audio_path }}")
              ffmpeg -y \
                     -i "${{ steps.download.outputs.local_video_path }}" \
                     -i "${{ steps.download.outputs.local_audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            "mix")
              echo "Mixing video audio with new audio..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_audio_path }}")
              ffmpeg -y \
                     -i "${{ steps.download.outputs.local_video_path }}" \
                     -i "${{ steps.download.outputs.local_audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]; [0:a][1:a]amix=inputs=2:duration=longest[a]" \
                     -map "[v]" \
                     -map "[a]" \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            "keep_video")
              echo "Keeping original video audio, ignoring new audio..."
              ffmpeg -y \
                     -i "${{ steps.download.outputs.local_video_path }}" \
                     -c:v copy \
                     -c:a aac \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
            *)
              echo "Unknown audio handling option: ${{ steps.params.outputs.audio_handling }}"
              echo "Defaulting to replace mode..."
              AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_audio_path }}")
              ffmpeg -y \
                     -i "${{ steps.download.outputs.local_video_path }}" \
                     -i "${{ steps.download.outputs.local_audio_path }}" \
                     -filter_complex "[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v]" \
                     -map "[v]" \
                     -map 1:a \
                     -c:v libx264 \
                     -c:a aac \
                     -t ${AUDIO_DURATION} \
                     "${{ steps.output.outputs.unique_output }}"
              ;;
          esac
          
          echo "Merge completed successfully!"
          echo "Output file size: $(du -h "${{ steps.output.outputs.unique_output }}" | cut -f1)"

      - name: Upload merged file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-video
          path: ${{ steps.output.outputs.unique_output }}

      - name: Commit merged file
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Add the generated file to git
          git add "${{ steps.output.outputs.unique_output }}"
          
          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes staged for commit (file may already exist or wasn't created)"
          else
            git commit -m "Add merged video: ${{ steps.output.outputs.unique_output }}"
            git push
            echo "Changes committed and pushed successfully"
          fi

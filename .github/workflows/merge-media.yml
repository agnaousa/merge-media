name: Merge Audio and Video with Background Sound & Captions


permissions:
  contents: write  # This line gives write access to the repository

on:
  workflow_dispatch:
    inputs:
      video_path:
        description: "Path to the video file or URL (for multipart/form-data upload)"
        required: true
        default: "input/video.mp4"
      audio_path:
        description: "Path to the audio file or URL (ignored if audio_base64 is provided)"
        required: false
        default: "input/audio.mp3"
      audio_base64:
        description: "Base64 encoded audio data (for multipart/form-data uploads)"
        required: false
        default: ""
      output_path:
        description: "Path for the output merged file"
        required: true
        default: "output/merged.mp4"
      audio_handling:
        description: "How to handle existing video audio"
        required: false
        default: "replace"
        type: choice
        options:
          - "replace"
          - "mix"
          - "keep_video"
      background_sound_config:
        description: "Background sound config JSON: {\"path\":\"\", \"base64\":\"\", \"volume\":\"0.3\"}"
        required: false
        default: "{\"path\":\"\", \"base64\":\"\", \"volume\":\"0.3\"}"
      caption_config:
        description: "Caption config JSON: {\"text\":\"\", \"font\":\"Arial\", \"fontsize\":\"24\", \"fontcolor\":\"white\", \"box\":\"1\", \"boxcolor\":\"black@0.5\", \"boxborderw\":\"5\", \"position\":\"bottom_center\", \"word_duration\":\"0.6\", \"animation\":\"word_by_word\"}"
        required: false
        default: "{\"text\":\"\", \"font\":\"Arial\", \"fontsize\":\"24\", \"fontcolor\":\"white\", \"box\":\"1\", \"boxcolor\":\"black@0.5\", \"boxborderw\":\"5\", \"position\":\"bottom_center\", \"word_duration\":\"0.6\", \"animation\":\"word_by_word\"}"
      elevenlabs_config:
        description: "ElevenLabs TTS config JSON: {\"text\":\"\", \"voice_id\":\"BtWabtumIemAotTjP5sk\", \"model\":\"eleven_flash_v2_5\", \"api_key\":\"\"}"
        required: false
        default: "{\"text\":\"\", \"voice_id\":\"BtWabtumIemAotTjP5sk\", \"model\":\"eleven_flash_v2_5\", \"api_key\":\"\"}"


jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Parse input parameters
        id: params
        run: |
          echo "video_path=${{ github.event.inputs.video_path }}" >> $GITHUB_OUTPUT
          echo "audio_path=${{ github.event.inputs.audio_path }}" >> $GITHUB_OUTPUT
          echo "audio_base64=${{ github.event.inputs.audio_base64 }}" >> $GITHUB_OUTPUT
          echo "output_path=${{ github.event.inputs.output_path }}" >> $GITHUB_OUTPUT
          echo "audio_handling=${{ github.event.inputs.audio_handling }}" >> $GITHUB_OUTPUT
          
          # Parse ElevenLabs config JSON
          ELEVENLABS_CONFIG='${{ github.event.inputs.elevenlabs_config }}'
          echo "elevenlabs_tts_text=$(echo "$ELEVENLABS_CONFIG" | jq -r '.text // ""')" >> $GITHUB_OUTPUT
          echo "elevenlabs_voice_id=$(echo "$ELEVENLABS_CONFIG" | jq -r '.voice_id // "BtWabtumIemAotTjP5sk"')" >> $GITHUB_OUTPUT
          echo "elevenlabs_model=$(echo "$ELEVENLABS_CONFIG" | jq -r '.model // "eleven_flash_v2_5"')" >> $GITHUB_OUTPUT
          echo "elevenlabs_api_key=$(echo "$ELEVENLABS_CONFIG" | jq -r '.api_key // ""')" >> $GITHUB_OUTPUT
          
          # Parse background sound config JSON
          BACKGROUND_CONFIG='${{ github.event.inputs.background_sound_config }}'
          echo "background_sound_path=$(echo "$BACKGROUND_CONFIG" | jq -r '.path // ""')" >> $GITHUB_OUTPUT
          echo "background_sound_base64=$(echo "$BACKGROUND_CONFIG" | jq -r '.base64 // ""')" >> $GITHUB_OUTPUT
          echo "background_volume=$(echo "$BACKGROUND_CONFIG" | jq -r '.volume // "0.3"')" >> $GITHUB_OUTPUT
          
          # Parse caption config JSON
          CAPTION_CONFIG='${{ github.event.inputs.caption_config }}'
          echo "caption_text=$(echo "$CAPTION_CONFIG" | jq -r '.text // ""')" >> $GITHUB_OUTPUT
          echo "caption_font=$(echo "$CAPTION_CONFIG" | jq -r '.font // "Arial"')" >> $GITHUB_OUTPUT
          echo "caption_fontsize=$(echo "$CAPTION_CONFIG" | jq -r '.fontsize // "24"')" >> $GITHUB_OUTPUT
          echo "caption_fontcolor=$(echo "$CAPTION_CONFIG" | jq -r '.fontcolor // "white"')" >> $GITHUB_OUTPUT
          echo "caption_box=$(echo "$CAPTION_CONFIG" | jq -r '.box // "1"')" >> $GITHUB_OUTPUT
          echo "caption_boxcolor=$(echo "$CAPTION_CONFIG" | jq -r '.boxcolor // "black@0.5"')" >> $GITHUB_OUTPUT
          echo "caption_boxborderw=$(echo "$CAPTION_CONFIG" | jq -r '.boxborderw // "5"')" >> $GITHUB_OUTPUT
          echo "caption_position=$(echo "$CAPTION_CONFIG" | jq -r '.position // "bottom_center"')" >> $GITHUB_OUTPUT
          echo "caption_word_duration=$(echo "$CAPTION_CONFIG" | jq -r '.word_duration // "0.6"')" >> $GITHUB_OUTPUT
          echo "caption_animation=$(echo "$CAPTION_CONFIG" | jq -r '.animation // "word_by_word"')" >> $GITHUB_OUTPUT

      - name: Set up FFmpeg and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq bc
          
          # Install common fonts for captions
          sudo apt-get install -y fonts-dejavu-core fonts-liberation fonts-noto-core
          sudo apt-get install -y fontconfig
          
          # List available fonts for debugging
          echo "Available fonts:"
          fc-list | grep -E "(Arial|DejaVu|Liberation|Noto)" | head -10

      - name: Generate audio using ElevenLabs TTS
        id: elevenlabs
        run: |
          TTS_TEXT="${{ steps.params.outputs.elevenlabs_tts_text }}"
          
          if [ -n "$TTS_TEXT" ] && [ "$TTS_TEXT" != "" ]; then
            echo "Generating audio using ElevenLabs TTS..."
            mkdir -p temp
            
            VOICE_ID="${{ steps.params.outputs.elevenlabs_voice_id }}"
            MODEL="${{ steps.params.outputs.elevenlabs_model }}"
            API_KEY="${{ steps.params.outputs.elevenlabs_api_key }}"
            TTS_OUTPUT_PATH="temp/tts_audio.mp3"
            
            # Check if API key is provided
            if [ -z "$API_KEY" ] || [ "$API_KEY" = "" ]; then
              echo "Error: ElevenLabs API key is required when using TTS"
              echo "use_generated_audio=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Create JSON payload (without API key)
            JSON_PAYLOAD=$(jq -n \
              --arg text "$TTS_TEXT" \
              --arg model "$MODEL" \
              '{
                text: $text,
                model_id: $model,
                voice_settings: {
                  stability: 0.5,
                  similarity_boost: 0.75
                }
              }')
            
            echo "Calling ElevenLabs API..."
            echo "Voice ID: $VOICE_ID"
            echo "Model: $MODEL"
            echo "Text: $TTS_TEXT"
            
            # Make API call to ElevenLabs (API key in header)
            HTTP_STATUS=$(curl -s -w "%{http_code}" -o "$TTS_OUTPUT_PATH" \
              -X POST \
              -H "Accept: audio/mpeg" \
              -H "Content-Type: application/json" \
              -H "xi-api-key: $API_KEY" \
              -d "$JSON_PAYLOAD" \
              "https://api.elevenlabs.io/v1/text-to-speech/$VOICE_ID")
            
            if [ "$HTTP_STATUS" -eq 200 ] && [ -s "$TTS_OUTPUT_PATH" ]; then
              echo "TTS audio generated successfully"
              echo "File size: $(du -h "$TTS_OUTPUT_PATH" | cut -f1)"
              echo "generated_audio_path=$TTS_OUTPUT_PATH" >> $GITHUB_OUTPUT
              echo "use_generated_audio=true" >> $GITHUB_OUTPUT
            else
              echo "Failed to generate TTS audio (HTTP Status: $HTTP_STATUS)"
              if [ -f "$TTS_OUTPUT_PATH" ]; then
                echo "Response content:"
                cat "$TTS_OUTPUT_PATH"
                rm "$TTS_OUTPUT_PATH"
              fi
              echo "use_generated_audio=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "No TTS text provided, skipping audio generation"
            echo "use_generated_audio=false" >> $GITHUB_OUTPUT
          fi

      - name: Download media files if URLs provided
        id: download
        run: |
          VIDEO_PATH="${{ steps.params.outputs.video_path }}"
          AUDIO_PATH="${{ steps.params.outputs.audio_path }}"
          AUDIO_BASE64="${{ steps.params.outputs.audio_base64 }}"
          
          # Function to check if a string is a URL
          is_url() {
            echo "$1" | grep -E "^https?://" > /dev/null
          }
          
          # Handle video input
          if is_url "$VIDEO_PATH"; then
            echo "Video input is a URL: $VIDEO_PATH"
            echo "Downloading video file..."
            mkdir -p temp
            VIDEO_EXT=$(echo "$VIDEO_PATH" | grep -oE '\.(mp4|avi|mov|mkv|webm|flv)(\?.*)?$' | sed 's/\?.*//' || echo ".mp4")
            LOCAL_VIDEO_PATH="temp/downloaded_video${VIDEO_EXT}"
            
            if curl -L -o "$LOCAL_VIDEO_PATH" "$VIDEO_PATH"; then
              echo "Video downloaded successfully"
              echo "local_video_path=$LOCAL_VIDEO_PATH" >> $GITHUB_OUTPUT
            else
              echo "Failed to download video from URL"
              exit 1
            fi
          else
            echo "Video input is a local path: $VIDEO_PATH"
            echo "local_video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          fi
          
          # Handle audio input - Priority: TTS > Base64 > URL > Local file
          USE_GENERATED_AUDIO="${{ steps.elevenlabs.outputs.use_generated_audio }}"
          GENERATED_AUDIO_PATH="${{ steps.elevenlabs.outputs.generated_audio_path }}"
          
          if [ "$USE_GENERATED_AUDIO" = "true" ] && [ -n "$GENERATED_AUDIO_PATH" ]; then
            echo "Using TTS-generated audio: $GENERATED_AUDIO_PATH"
            echo "local_audio_path=$GENERATED_AUDIO_PATH" >> $GITHUB_OUTPUT
          else
            # Fallback to original audio handling logic
            BASE64_DATA=""
            CONTENT_TYPE="audio/mpeg"
            
            # Check if audio_base64 field has data (direct base64 string only)
            if [ -n "$AUDIO_BASE64" ] && [ "$AUDIO_BASE64" != "" ]; then
              echo "Processing base64 encoded audio data from audio_base64 field..."
              BASE64_DATA="$AUDIO_BASE64"
              echo "Using direct base64 string with default content type: $CONTENT_TYPE"
            fi
            
            # If we found base64 data, process it
            if [ -n "$BASE64_DATA" ]; then
              mkdir -p temp
              
              if [ -z "$BASE64_DATA" ]; then
                echo "Error: No base64 audio data found in input"
                exit 1
              fi
              
              # Determine file extension from content type
              case "$CONTENT_TYPE" in
                "audio/mpeg"|"audio/mp3")
                  AUDIO_EXT=".mp3"
                  ;;
                "audio/wav"|"audio/wave")
                  AUDIO_EXT=".wav"
                  ;;
                "audio/aac")
                  AUDIO_EXT=".aac"
                  ;;
                "audio/ogg")
                  AUDIO_EXT=".ogg"
                  ;;
                "audio/m4a")
                  AUDIO_EXT=".m4a"
                  ;;
                "audio/flac")
                  AUDIO_EXT=".flac"
                  ;;
                *)
                  echo "Warning: Unknown content type '$CONTENT_TYPE', defaulting to .mp3"
                  AUDIO_EXT=".mp3"
                  ;;
              esac
              
              LOCAL_AUDIO_PATH="temp/decoded_audio${AUDIO_EXT}"
              
              # Decode base64 data to file
              if echo "$BASE64_DATA" | base64 -d > "$LOCAL_AUDIO_PATH"; then
                # Verify the file was created and has content
                if [ -s "$LOCAL_AUDIO_PATH" ]; then
                  echo "Base64 audio decoded successfully"
                  echo "Content type: $CONTENT_TYPE"
                  echo "File size: $(du -h "$LOCAL_AUDIO_PATH" | cut -f1)"
                  echo "local_audio_path=$LOCAL_AUDIO_PATH" >> $GITHUB_OUTPUT
                else
                  echo "Error: Decoded audio file is empty"
                  exit 1
                fi
              else
                echo "Error: Failed to decode base64 audio data"
                exit 1
              fi
            elif is_url "$AUDIO_PATH"; then
              echo "Audio input is a URL: $AUDIO_PATH"
              echo "Downloading audio file..."
              mkdir -p temp
              AUDIO_EXT=$(echo "$AUDIO_PATH" | grep -oE '\.(mp3|wav|aac|ogg|m4a|flac)(\?.*)?$' | sed 's/\?.*//' || echo ".mp3")
              LOCAL_AUDIO_PATH="temp/downloaded_audio${AUDIO_EXT}"
              
              if curl -L -o "$LOCAL_AUDIO_PATH" "$AUDIO_PATH"; then
                echo "Audio downloaded successfully"
                echo "local_audio_path=$LOCAL_AUDIO_PATH" >> $GITHUB_OUTPUT
              else
                echo "Failed to download audio from URL"
                exit 1
              fi
            else
              echo "Audio input is a local path: $AUDIO_PATH"
              echo "local_audio_path=$AUDIO_PATH" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Handle background sound input (similar to main audio handling)
          BACKGROUND_SOUND_PATH="${{ steps.params.outputs.background_sound_path }}"
          BACKGROUND_SOUND_BASE64="${{ steps.params.outputs.background_sound_base64 }}"
          
          # Check if background sound is provided
          if [ -n "$BACKGROUND_SOUND_BASE64" ] && [ "$BACKGROUND_SOUND_BASE64" != "" ]; then
            echo "Processing base64 encoded background sound data..."
            mkdir -p temp
            LOCAL_BACKGROUND_PATH="temp/background_sound.mp3"
            
            if echo "$BACKGROUND_SOUND_BASE64" | base64 -d > "$LOCAL_BACKGROUND_PATH"; then
              if [ -s "$LOCAL_BACKGROUND_PATH" ]; then
                echo "Background sound decoded successfully"
                echo "local_background_path=$LOCAL_BACKGROUND_PATH" >> $GITHUB_OUTPUT
              else
                echo "Error: Decoded background sound file is empty"
                exit 1
              fi
            else
              echo "Error: Failed to decode base64 background sound data"
              exit 1
            fi
          elif [ -n "$BACKGROUND_SOUND_PATH" ] && [ "$BACKGROUND_SOUND_PATH" != "" ]; then
            if is_url "$BACKGROUND_SOUND_PATH"; then
              echo "Background sound input is a URL: $BACKGROUND_SOUND_PATH"
              echo "Downloading background sound file..."
              mkdir -p temp
              BG_EXT=$(echo "$BACKGROUND_SOUND_PATH" | grep -oE '\.(mp3|wav|aac|ogg|m4a|flac)(\?.*)?$' | sed 's/\?.*//' || echo ".mp3")
              LOCAL_BACKGROUND_PATH="temp/background_sound${BG_EXT}"
              
              if curl -L -o "$LOCAL_BACKGROUND_PATH" "$BACKGROUND_SOUND_PATH"; then
                echo "Background sound downloaded successfully"
                echo "local_background_path=$LOCAL_BACKGROUND_PATH" >> $GITHUB_OUTPUT
              else
                echo "Failed to download background sound from URL"
                exit 1
              fi
            else
              echo "Background sound input is a local path: $BACKGROUND_SOUND_PATH"
              echo "local_background_path=$BACKGROUND_SOUND_PATH" >> $GITHUB_OUTPUT
            fi
          else
            echo "No background sound provided"
            echo "local_background_path=" >> $GITHUB_OUTPUT
          fi

      - name: Generate unique output filename
        id: output
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          RUN_ID=${{ github.run_id }}
          BASENAME=$(basename "${{ steps.params.outputs.output_path }}" .mp4)
          DIRNAME=$(dirname "${{ steps.params.outputs.output_path }}")
          UNIQUE_OUTPUT="${DIRNAME}/${BASENAME}_${TIMESTAMP}_${RUN_ID}.mp4"
          echo "unique_output=${UNIQUE_OUTPUT}" >> $GITHUB_OUTPUT
          echo "Generated unique output path: ${UNIQUE_OUTPUT}"

      - name: Validate input files
        run: |
          if [ ! -f "${{ steps.download.outputs.local_video_path }}" ]; then
            echo "Error: Video file not found at ${{ steps.download.outputs.local_video_path }}"
            exit 1
          fi
          
          # Check if TTS was used or if we need to validate other audio sources
          USE_GENERATED_AUDIO="${{ steps.elevenlabs.outputs.use_generated_audio }}"
          if [ "$USE_GENERATED_AUDIO" = "true" ]; then
            GENERATED_AUDIO_PATH="${{ steps.elevenlabs.outputs.generated_audio_path }}"
            if [ ! -f "$GENERATED_AUDIO_PATH" ]; then
              echo "Error: TTS-generated audio file not found at $GENERATED_AUDIO_PATH"
              exit 1
            else
              echo "TTS-generated audio file validated: $GENERATED_AUDIO_PATH"
            fi
          else
            if [ ! -f "${{ steps.download.outputs.local_audio_path }}" ]; then
              echo "Error: Audio file not found at ${{ steps.download.outputs.local_audio_path }}"
              exit 1
            fi
          fi
          
          # Validate background sound if provided
          BACKGROUND_PATH="${{ steps.download.outputs.local_background_path }}"
          if [ -n "$BACKGROUND_PATH" ] && [ "$BACKGROUND_PATH" != "" ]; then
            if [ ! -f "$BACKGROUND_PATH" ]; then
              echo "Error: Background sound file not found at $BACKGROUND_PATH"
              exit 1
            else
              echo "Background sound file validated: $BACKGROUND_PATH"
            fi
          fi
          
          echo "Input files validated successfully"

      - name: Create output directory
        run: |
          mkdir -p "$(dirname "${{ steps.output.outputs.unique_output }}")"
          echo "Output directory created: $(dirname "${{ steps.output.outputs.unique_output }}")"

      - name: Merge audio with video
        run: |
          echo "Starting merge process..."
          echo "Video: ${{ steps.params.outputs.video_path }}"
          
          # Display audio source information
          USE_GENERATED_AUDIO="${{ steps.elevenlabs.outputs.use_generated_audio }}"
          if [ "$USE_GENERATED_AUDIO" = "true" ]; then
            echo "Audio: TTS-generated from text: '${{ steps.params.outputs.elevenlabs_tts_text }}'"
            echo "Voice ID: ${{ steps.params.outputs.elevenlabs_voice_id }}"
            echo "Model: ${{ steps.params.outputs.elevenlabs_model }}"
            echo "Local Audio: ${{ steps.elevenlabs.outputs.generated_audio_path }}"
          else
            echo "Audio: ${{ steps.params.outputs.audio_path }}"
            echo "Local Audio: ${{ steps.download.outputs.local_audio_path }}"
          fi
          
          echo "Local Video: ${{ steps.download.outputs.local_video_path }}"
          echo "Background Sound: ${{ steps.download.outputs.local_background_path }}"
          echo "Caption Text: ${{ steps.params.outputs.caption_text }}"
          echo "Output: ${{ steps.output.outputs.unique_output }}"
          echo "Audio handling: ${{ steps.params.outputs.audio_handling }}"
          
          # Check if video has audio stream
          VIDEO_HAS_AUDIO=$(ffprobe -v quiet -select_streams a -show_entries stream=codec_type -of csv=p=0 "${{ steps.download.outputs.local_video_path }}" | wc -l)
          echo "Video has audio streams: $VIDEO_HAS_AUDIO"
          
          # Get basic parameters
          BACKGROUND_PATH="${{ steps.download.outputs.local_background_path }}"
          BACKGROUND_VOLUME="${{ steps.params.outputs.background_volume }}"
          CAPTION_TEXT="${{ steps.params.outputs.caption_text }}"
          CAPTION_FONT="${{ steps.params.outputs.caption_font }}"
          CAPTION_FONTSIZE="${{ steps.params.outputs.caption_fontsize }}"
          CAPTION_FONTCOLOR="${{ steps.params.outputs.caption_fontcolor }}"
          CAPTION_BOX="${{ steps.params.outputs.caption_box }}"
          CAPTION_BOXCOLOR="${{ steps.params.outputs.caption_boxcolor }}"
          CAPTION_BOXBORDERW="${{ steps.params.outputs.caption_boxborderw }}"
          CAPTION_POSITION="${{ steps.params.outputs.caption_position }}"
          CAPTION_WORD_DURATION="${{ steps.params.outputs.caption_word_duration }}"
          CAPTION_ANIMATION="${{ steps.params.outputs.caption_animation }}"
          
          # Build caption style from individual parameters
          CAPTION_STYLE="fontfile=/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf:fontsize=${CAPTION_FONTSIZE}:fontcolor=${CAPTION_FONTCOLOR}"
          
          # Map font names to actual font files
          case "$CAPTION_FONT" in
            "Arial"|"arial")
              FONT_FILE="/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf"
              ;;
            "Times"|"times"|"Times New Roman")
              FONT_FILE="/usr/share/fonts/truetype/liberation/LiberationSerif-Regular.ttf"
              ;;
            "Courier"|"courier"|"Courier New")
              FONT_FILE="/usr/share/fonts/truetype/liberation/LiberationMono-Regular.ttf"
              ;;
            "DejaVu"|"dejavu")
              FONT_FILE="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
              ;;
            "Noto"|"noto")
              FONT_FILE="/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf"
              ;;
            *)
              echo "Font '$CAPTION_FONT' not recognized, using DejaVu Sans as fallback"
              FONT_FILE="/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
              ;;
          esac
          
          # Update caption style with selected font
          CAPTION_STYLE="fontfile=${FONT_FILE}:size=${CAPTION_FONTSIZE}:fontcolor=${CAPTION_FONTCOLOR}"
          
          # Add box styling if enabled
          if [ "$CAPTION_BOX" = "1" ]; then
            CAPTION_STYLE="${CAPTION_STYLE}:box=1:boxcolor=${CAPTION_BOXCOLOR}:boxborderw=${CAPTION_BOXBORDERW}"
          fi
          
          echo "Caption font: $CAPTION_FONT (${FONT_FILE})"
          echo "Caption fontsize: $CAPTION_FONTSIZE"
          echo "Caption style: $CAPTION_STYLE"
          
          # Validate fontsize is numeric
          if ! [[ "$CAPTION_FONTSIZE" =~ ^[0-9]+$ ]]; then
            echo "Warning: fontsize '$CAPTION_FONTSIZE' is not numeric, using default 24"
            CAPTION_FONTSIZE="24"
            # Update caption style with corrected fontsize
            CAPTION_STYLE="fontfile=${FONT_FILE}:size=${CAPTION_FONTSIZE}:fontcolor=${CAPTION_FONTCOLOR}"
            if [ "$CAPTION_BOX" = "1" ]; then
              CAPTION_STYLE="${CAPTION_STYLE}:box=1:boxcolor=${CAPTION_BOXCOLOR}:boxborderw=${CAPTION_BOXBORDERW}"
            fi
          fi
          
          # Determine caption position coordinates
          case "$CAPTION_POSITION" in
            "top_left") CAPTION_X="10"; CAPTION_Y="10" ;;
            "top_center") CAPTION_X="(w-text_w)/2"; CAPTION_Y="10" ;;
            "top_right") CAPTION_X="w-text_w-10"; CAPTION_Y="10" ;;
            "center_left") CAPTION_X="10"; CAPTION_Y="(h-text_h)/2" ;;
            "center") CAPTION_X="(w-text_w)/2"; CAPTION_Y="(h-text_h)/2" ;;
            "center_right") CAPTION_X="w-text_w-10"; CAPTION_Y="(h-text_h)/2" ;;
            "bottom_left") CAPTION_X="10"; CAPTION_Y="h-text_h-10" ;;
            "bottom_center") CAPTION_X="(w-text_w)/2"; CAPTION_Y="h-text_h-10" ;;
            "bottom_right") CAPTION_X="w-text_w-10"; CAPTION_Y="h-text_h-10" ;;
            *) CAPTION_X="(w-text_w)/2"; CAPTION_Y="h-text_h-10" ;;  # default to bottom_center
          esac
          
          # Build filter complex based on options
          VIDEO_FILTER="[0:v]loop=loop=-1:size=32767:start=0[looped_video]; [looped_video]setpts=PTS-STARTPTS[v_base]"
          
          # Add caption filter if caption text is provided
          if [ -n "$CAPTION_TEXT" ] && [ "$CAPTION_TEXT" != "" ]; then
            
            # Check animation type
            if [ "$CAPTION_ANIMATION" = "word_by_word" ]; then
              echo "Adding animated word-by-word captions to video (one word at a time)..."
              
              # Split text into words
              IFS=' ' read -ra WORDS <<< "$CAPTION_TEXT"
              WORD_COUNT=${#WORDS[@]}
              
              # Use configurable word duration
              WORD_DURATION="$CAPTION_WORD_DURATION"
              
              echo "Caption animation: $WORD_COUNT words, ${WORD_DURATION}s per word (individual words)"
              
              # Start with base video
              CURRENT_VIDEO_TAG="[v_base]"
              CAPTION_FILTERS=""
              
              # Create filters for each individual word (not cumulative)
              for i in "${!WORDS[@]}"; do
                # Get only the current word
                CURRENT_WORD="${WORDS[$i]}"
                
                # Escape special characters for FFmpeg
                ESCAPED_TEXT=$(echo "$CURRENT_WORD" | sed "s/'/'\\\\''/g; s/:/\\\\:/g; s/,/\\\\,/g")
                
                # Calculate start and end time for this word
                START_TIME=$(echo "$i * $WORD_DURATION" | bc -l)
                END_TIME=$(echo "($i + 1) * $WORD_DURATION" | bc -l)
                
                # Create the drawtext filter with enable condition for specific time window
                NEXT_VIDEO_TAG="[caption_step_${i}]"
                CAPTION_FILTERS="${CAPTION_FILTERS}; ${CURRENT_VIDEO_TAG}drawtext=text='${ESCAPED_TEXT}':${CAPTION_STYLE}:x=${CAPTION_X}:y=${CAPTION_Y}:enable='between(t,${START_TIME},${END_TIME})'${NEXT_VIDEO_TAG}"
                
                CURRENT_VIDEO_TAG="${NEXT_VIDEO_TAG}"
              done
              
              # Add all caption filters to the main video filter
              VIDEO_FILTER="${VIDEO_FILTER}${CAPTION_FILTERS}"
              FINAL_VIDEO="${CURRENT_VIDEO_TAG}"
              
              echo "Created individual word animation with $WORD_COUNT steps"
            else
              echo "Adding static captions to video..."
              # Original static caption behavior
              ESCAPED_TEXT=$(echo "$CAPTION_TEXT" | sed "s/'/'\\\\''/g; s/:/\\\\:/g; s/,/\\\\,/g")
              VIDEO_FILTER="${VIDEO_FILTER}; [v_base]drawtext=text='${ESCAPED_TEXT}':${CAPTION_STYLE}:x=${CAPTION_X}:y=${CAPTION_Y}[v_with_text]"
              FINAL_VIDEO="[v_with_text]"
            fi
          else
            FINAL_VIDEO="[v_base]"
          fi
          
          # Handle audio mixing based on mode and background sound
          AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_audio_path }}")
          
          # Build audio filter based on background sound, audio handling, and whether video has audio
          if [ -n "$BACKGROUND_PATH" ] && [ "$BACKGROUND_PATH" != "" ]; then
            echo "Background sound detected, creating complex audio mix..."
            case "${{ steps.params.outputs.audio_handling }}" in
              "replace")
                echo "Mode: Replace video audio + add background sound"
                AUDIO_FILTER="; [1:a]volume=1[main_audio]; [2:a]aloop=loop=-1:size=2e+09,volume=${BACKGROUND_VOLUME}[bg_audio]; [main_audio][bg_audio]amix=inputs=2:duration=first[a]"
                INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\" -i \"$BACKGROUND_PATH\""
                ;;
              "mix")
                if [ "$VIDEO_HAS_AUDIO" -gt 0 ]; then
                  echo "Mode: Mix video audio with new audio + add background sound"
                  AUDIO_FILTER="; [0:a][1:a]amix=inputs=2:duration=longest[mixed_audio]; [mixed_audio]volume=1[main_audio]; [2:a]aloop=loop=-1:size=2e+09,volume=${BACKGROUND_VOLUME}[bg_audio]; [main_audio][bg_audio]amix=inputs=2:duration=first[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\" -i \"$BACKGROUND_PATH\""
                else
                  echo "Mode: Video has no audio, using new audio + background sound"
                  AUDIO_FILTER="; [1:a]volume=1[main_audio]; [2:a]aloop=loop=-1:size=2e+09,volume=${BACKGROUND_VOLUME}[bg_audio]; [main_audio][bg_audio]amix=inputs=2:duration=first[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\" -i \"$BACKGROUND_PATH\""
                fi
                ;;
              "keep_video")
                if [ "$VIDEO_HAS_AUDIO" -gt 0 ]; then
                  echo "Mode: Keep video audio + add background sound"
                  AUDIO_FILTER="; [0:a]volume=1[main_audio]; [1:a]aloop=loop=-1:size=2e+09,volume=${BACKGROUND_VOLUME}[bg_audio]; [main_audio][bg_audio]amix=inputs=2:duration=first[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"$BACKGROUND_PATH\""
                  AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_video_path }}")
                else
                  echo "Mode: Video has no audio, using background sound only"
                  AUDIO_FILTER="; [1:a]aloop=loop=-1:size=2e+09,volume=${BACKGROUND_VOLUME}[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"$BACKGROUND_PATH\""
                  AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_video_path }}")
                fi
                ;;
            esac
          else
            echo "No background sound, using standard audio handling..."
            case "${{ steps.params.outputs.audio_handling }}" in
              "replace")
                AUDIO_FILTER="; [1:a]volume=1[a]"
                INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\""
                ;;
              "mix")
                if [ "$VIDEO_HAS_AUDIO" -gt 0 ]; then
                  AUDIO_FILTER="; [0:a][1:a]amix=inputs=2:duration=longest[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\""
                else
                  echo "Video has no audio, using new audio only"
                  AUDIO_FILTER="; [1:a]volume=1[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\" -i \"${{ steps.download.outputs.local_audio_path }}\""
                fi
                ;;
              "keep_video")
                if [ "$VIDEO_HAS_AUDIO" -gt 0 ]; then
                  AUDIO_FILTER="; [0:a]volume=1[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\""
                  AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_video_path }}")
                else
                  echo "Video has no audio, cannot keep video audio. Adding silence."
                  AUDIO_FILTER="; anullsrc=channel_layout=stereo:sample_rate=44100[a]"
                  INPUTS="-i \"${{ steps.download.outputs.local_video_path }}\""
                  AUDIO_DURATION=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "${{ steps.download.outputs.local_video_path }}")
                fi
                ;;
            esac
          fi
          
          # Combine video and audio filters
          COMPLETE_FILTER="${VIDEO_FILTER}${AUDIO_FILTER}"
          
          echo "Executing FFmpeg with complex filter..."
          echo "Filter: $COMPLETE_FILTER"
          
          echo "Final FFmpeg command debug:"
          echo "INPUTS: $INPUTS"
          echo "COMPLETE_FILTER: $COMPLETE_FILTER"
          echo "FINAL_VIDEO: $FINAL_VIDEO"
          echo "AUDIO_DURATION: $AUDIO_DURATION"
          echo ""
          echo "Executing FFmpeg..."
          
          eval "ffmpeg -y $INPUTS -filter_complex \"$COMPLETE_FILTER\" -map \"$FINAL_VIDEO\" -map \"[a]\" -c:v libx264 -c:a aac -t $AUDIO_DURATION \"${{ steps.output.outputs.unique_output }}\""
          
          echo "Merge completed successfully!"
          echo "Output file size: $(du -h "${{ steps.output.outputs.unique_output }}" | cut -f1)"

      - name: Upload merged file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-video
          path: ${{ steps.output.outputs.unique_output }}

      - name: Commit merged file
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Add the generated file to git
          git add "${{ steps.output.outputs.unique_output }}"
          
          # Check if there are any staged changes
          if git diff --staged --quiet; then
            echo "No changes staged for commit (file may already exist or wasn't created)"
          else
            git commit -m "Add merged video: ${{ steps.output.outputs.unique_output }}"
            git push
            echo "Changes committed and pushed successfully"
          fi

      - name: Generate output URL
        id: url
        run: |
          # Generate the URL to access the output file
          OUTPUT_FILE="${{ steps.output.outputs.unique_output }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          FILE_URL="${REPO_URL}/blob/${BRANCH}/${OUTPUT_FILE}"
          RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${BRANCH}/${OUTPUT_FILE}"
          
          echo "file_url=${FILE_URL}" >> $GITHUB_OUTPUT
          echo "raw_url=${RAW_URL}" >> $GITHUB_OUTPUT
          echo "filename=$(basename "${OUTPUT_FILE}")" >> $GITHUB_OUTPUT
          
          echo "Generated URLs:"
          echo "File URL: ${FILE_URL}"
          echo "Raw URL: ${RAW_URL}"

      - name: Cleanup old files
        run: |
          echo "Cleaning up old output files..."
          
          # Clean up temporary files
          if [ -d "temp" ]; then
            rm -rf temp
            echo "Removed temp directory"
          fi
          
          # Remove output files older than 30 days
          if [ -d "output" ]; then
            DELETED_COUNT=$(find output -name "*.mp4" -type f -mtime +30 -delete -print | wc -l)
            echo "Deleted $DELETED_COUNT old output files (older than 30 days)"
          fi
          
          # Commit cleanup if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Auto-cleanup: Remove old files and temp directory [skip ci]"
            git push
            echo "Cleanup changes committed"
          fi
